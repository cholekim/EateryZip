<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Guser">

	<!-- 공통 프로필 이미지 가져오기 -->
	<select id="getProfileImg" parameterType="String" resultType="String">
		SELECT g_profile
		FROM g_user
		WHERE g_id=#{g_id,jdbcType=VARCHAR}
	</select>

	<!-- select의 결과가 없으면 0이 된다.-->
	<select id="getData" parameterType="string" resultType="GuserDto">
	select g_id, g_pwd, g_name, g_address, g_email, g_email2, g_phone, g_profile, to_char(g_regdate,'YYYY-MM-DD'), grade
	from g_user
	where g_id = #{g_id}	
	</select>
	
	<insert id="insert" parameterType="GuserDto">
	insert into g_user
	(g_id, g_pwd, g_name, g_address, g_email, g_email2, g_phone, g_regdate, grade)
	values(#{g_id}, #{g_pwd}, #{g_name}, #{g_address},  #{g_email}, #{g_email2}, #{g_phone}, sysdate, #{grade})
	</insert>
	
	<select id="isExist" parameterType="java.lang.String" resultType="string">
	Select g_id
	from g_user
	where g_id=#{g_id} 
	</select>
		
	<select id="getId" parameterType="GuserDto" resultType="String">
	Select g_id
	from g_user
	where g_name=#{g_name} and g_phone=#{g_phone} 
	</select>
	
	<select id="getPwd" parameterType="GuserDto" resultType="String">
	Select g_pwd
	from g_user
	where g_id=#{g_id} and g_phone=#{g_phone} 
	</select>
	
	<update id="pwdChange" parameterType="GuserDto">
	Update g_user
	Set g_pwd = #{g_newPwd}
	where g_id=#{g_id}
	</update>
	

	<!-- 혜림 -->
	<update id="update" parameterType="GuserDto">
		UPDATE g_user
		SET g_name=#{g_name},g_address=#{g_address,jdbcType=VARCHAR},g_email=#{g_email,jdbcType=VARCHAR},g_phone=#{g_phone},g_profile=#{g_profile,jdbcType=VARCHAR}
		WHERE g_id = #{g_id }
	</update>

	<!--  회원탈퇴 -->
	<delete id="delete" parameterType="string">
		DELETE from g_user
		WHERE g_id=#{g_id}
	</delete>

	<!-- 일반 유저 포장 내역  리스트 가져오기-->
	<select id="getTakeoutList" parameterType="takeoutDto" resultType="takeoutDto">
		SELECT *
		 FROM
		 (SELECT result1.*, ROWNUM AS rnum
		  FROM (SELECT b.b_name, takeout_date,takeout_time,takeout_price,takeout_num,t.b_id,t.g_id,(SELECT NVL(MAX(ROWNUM),0) FROM REVIEW WHERE takeout_num=t.takeout_num) did_it
		      FROM b_store b,takeout t
		      WHERE b.b_id=t.b_id AND t.g_id=#{g_id,jdbcType=VARCHAR}) result1)
		<![CDATA[ 
		WHERE rnum >= #{startRowNum} AND rnum <= #{endRowNum}
		]]>
	</select>
	
	<select id="getTakeoutCount" parameterType="takeoutDto" resultType="int">
		SELECT NVL(MAX(ROWNUM),0)
		FROM takeout 
		WHERE g_id=#{g_id,jdbcType=VARCHAR}
	</select>
	
	<!-- 일반유저 예약내역리스트 가져오기 -->
	<select id="getReservationList" parameterType="ReservationDto" resultType="ReservationDto">
		SELECT *
		 FROM
		 (SELECT result1.*, ROWNUM AS rnum
		  FROM (SELECT b_store_name, reservation_date, reservation_time, reservation_name, reservation_people ,reservation_num,r.b_id,r.g_id,(SELECT NVL(MAX(ROWNUM),0) FROM REVIEW WHERE reservation_num=r.reservation_num) did_it
		      FROM b_store b,reservation r
		      WHERE b.b_id=r.b_id AND r.g_id=#{g_id,jdbcType=VARCHAR}) result1)
		<![CDATA[ 
		WHERE rnum >= #{startRowNum} AND rnum <= #{endRowNum}
		]]>
	</select>
	
	<select id="getReservationCount" parameterType="ReservationDto" resultType="int">
		SELECT NVL(MAX(ROWNUM),0)
		FROM reservation 
		WHERE g_id=#{g_id,jdbcType=VARCHAR}
	</select>
	
	<!-- 일반유저 스크랩내역 가져오기 -->
	<select id="getScrapList" parameterType="EateryScrapDto" resultType="EateryScrapDto">
		SELECT *
		FROM
		(SELECT result1.*, ROWNUM AS rnum
	 		FROM (SELECT  s.b_id,s.g_id, b.b_name, b.b_kind, b.intro
				FROM eatery_scrap s, g_user g, b_store b
				WHERE s.g_id = g.g_id
				AND s.b_id = b.b_id (+)
				AND g.g_id =#{g_id,jdbcType=VARCHAR}) result1)
		<![CDATA[ 
		WHERE rnum >= #{startRowNum} AND rnum <= #{endRowNum}
		]]>
	</select>
	
	<select id="getScrapCount" parameterType="EateryScrapDto" resultType="int">
		SELECT NVL(MAX(ROWNUM),0)
		FROM eatery_scrap 
		WHERE g_id=#{g_id,jdbcType=VARCHAR}
	</select>
	
	<!-- 음식점 스크랩 취소하기 -->
   <delete id="notScrap" parameterType="EateryScrapDto">
      DELETE FROM eatery_scrap
      WHERE b_id=#{b_id} AND g_id=#{g_id,jdbcType=VARCHAR}
   </delete>
	
	
</mapper>