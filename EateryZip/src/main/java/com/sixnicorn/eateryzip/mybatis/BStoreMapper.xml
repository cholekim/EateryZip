<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="BStore">
	<sql id="search">
		WHERE b_name LIKE '%'||#{encodedK,jdbcType=VARCHAR}||'%'
		OR b_Store_Address LIKE '%'||#{encodedK,jdbcType=VARCHAR}||'%'
		OR b_kind LIKE '%'||#{encodedK,jdbcType=VARCHAR}||'%'
		OR intro LIKE '%'||#{encodedK,jdbcType=VARCHAR}||'%'
		OR notice LIKE '%'||#{encodedK,jdbcType=VARCHAR}||'%'
		OR service LIKE '%'||#{encodedK,jdbcType=VARCHAR}||'%'
		OR ex_keyword LIKE '%'||#{encodedK,jdbcType=VARCHAR}||'%'
		OR checkKeyword LIKE '%'||#{encodedK,jdbcType=VARCHAR}||'%'
	</sql>
	
	<!-- 주연 음식점 상세 정보 페이지 -->
	<!-- 음식점 사진 리스트 가져오기  -->
	<select id="getStoreImgList" parameterType="String" resultType="StoreImgDto">
		SELECT *
		FROM store_img
		WHERE b_id=#{b_id}
	</select>
	
	<!-- 메뉴 이름,이미지,가격 리스트 가져오기 -->
	<select id="getMenuList" parameterType="String" resultType="MenuDto">
		SELECT menu_name,menu_price,menu_image
		FROM menu
		WHERE b_id=#{b_id}	
	</select>
	
	<!-- 리뷰 리스트 최신순 가져오기 -->
	<select id="getReviewList" parameterType="ReviewDto" resultType="ReviewDto">
		SELECT *
		FROM
		(SELECT result1.*, ROWNUM AS rnum
		   FROM (SELECT DISTINCT a.review_num,a.b_id,a.writer,a.review_image,TO_CHAR(a.review_content) AS review_content,a.regdate,a.keyword_review,a.review_kind,a.takeout_num,a.reservation_num,(SELECT NVL(MAX(ROWNUM), 0) FROM REVIEW_GOOD WHERE REVIEW_NUM=b.review_num) as GOOD_COUNT
		         FROM review a
		         INNER JOIN review_good b on a.review_num=b.review_num
		         WHERE a.b_id=#{b_id}
		         ORDER BY regdate DESC) result1)
		<![CDATA[ 
		WHERE rnum >= #{startRowNum} AND rnum <= #{endRowNum}
		]]>
	</select>
	
	<!-- 리뷰 리스트 인기순 가져오기 -->
	<!-- 일단 미루기 -->
	<select id="getPopularReviewList" parameterType="ReviewDto" resultType="ReviewDto" >
		SELECT *
		FROM
		(SELECT result1.*, ROWNUM AS rnum
		   FROM (SELECT DISTINCT a.review_num,a.b_id,a.writer,a.review_image,TO_CHAR(a.review_content) AS review_content,a.regdate,a.keyword_review,a.review_kind,a.takeout_num,a.reservation_num,(SELECT NVL(MAX(ROWNUM), 0) FROM REVIEW_GOOD WHERE REVIEW_NUM=a.review_num) as GOOD_COUNT
		         FROM review a, review_good b
		         WHERE a.b_id=#{b_id}
		         ORDER BY good_count DESC) result1)
		<![CDATA[ 
		WHERE rnum >= #{startRowNum} AND rnum <= #{endRowNum}
		]]>
	</select>
	
	<!-- 리뷰 개수 세기 -->
	<select id="getReviewCount" parameterType="String" resultType="int">
		SELECT NVL(MAX(ROWNUM), 0)
		FROM review
		WHERE b_id=#{b_id}
	</select>
	
	<!-- 키워드별 개수 -->
	<select id="getKeyCount" parameterType="ReviewDto" resultType="ReviewDto">
		SELECT #{key_word} AS key_word, NVL(MAX(ROWNUM),0) AS good_count
		FROM review
		WHERE keyword_review LIKE '%'||#{key_word}||'%' AND b_id=#{b_id}
	</select>
	
	<!-- 음식점 스크랩하기 -->
	<insert id="doScrap" parameterType="EateryScrapDto">
		INSERT INTO eatery_scrap
		(b_id,g_id)
		VALUES(#{b_id},#{g_id})
	</insert>
	<!-- 음식점 스크랩 취소하기 -->
	<delete id="notScrap" parameterType="EateryScrapDto">
		DELETE FROM eatery_scrap
		WHERE b_id=#{b_id} AND g_id=#{g_id}
	</delete>
	<!-- 음식점 스크랩 유무 확인하기 -->
	<select id="isScrap" parameterType="EateryScrapDto" resultType="int">
		SELECT NVL(MAX(ROWNUM),0)
		FROM eatery_scrap
		WHERE b_id=#{b_id} AND g_id=#{g_id}
	</select>
	
	<!-- 주연&혜림 -->
	<!-- b_id로 가게정보 얻어오기 -->
	<select id="getStore" parameterType="String" resultType="BStoreDto">
		SELECT *
		FROM B_Store
		WHERE b_id=#{b_id}
	</select>
	
	<!-- 혜림 -->
	
	<!-- 가게 등록하기 -->
	<insert id="insert" parameterType="BStoreDto">
		INSERT INTO B_Store
		(b_id,b_name, b_Store_Address, b_kind, intro, b_Store_phone,b_Store_date, b_open, b_close, notice, service, ex_keyword, checkKeyword)
		VALUES(#{b_id},#{b_name},#{b_Store_Address},#{b_kind},#{intro},#{b_Store_phone},#{b_Store_date},#{b_open},#{b_close},#{notice,jdbcType=VARCHAR},#{service},#{ex_keyword},#{checkKeyword,jdbcType=VARCHAR})
	</insert>
	
	<!-- 이미지등록하기 -->
	<insert id="insertStoreImg" parameterType="StoreImgDto">
		INSERT INTO store_img
		(b_id,store_img)
		VALUES(#{b_id},#{store_img})
	</insert>
	
	
	<!-- 가게정보 수정하기 -->
	<update id="update" parameterType="BStoreDto">
		UPDATE B_Store
		SET b_name=#{b_name}, b_Store_Address=#{b_Store_Address}, b_kind=#{b_kind},intro=#{intro},b_Store_phone=#{b_Store_phone},b_Store_date=#{b_Store_date},
			b_open=#{b_open},b_close=#{b_close},notice=#{notice,jdbcType=VARCHAR},service=#{service},ex_keyword=#{ex_keyword},checkKeyword=#{checkKeyword,jdbcType=VARCHAR}
		WHERE b_id=#{b_id}
		
	</update>
	
	<select id="getStore2" parameterType="BStoreDto" resultType="BStoreDto">
		SELECT result1.*
		FROM
			(SELECT *,
				LAG(b_id,1,0) OVER (ORDER BY b_id DESC) AS prevNum,
				LEAD(b_id,1,0) OVER (ORDER BY b_id DESC) AS nextNum
			FROM B_STORE
			) result1
		WHERE b_id=#{b_id}
	</select>
  
	<!-- 나현님 부분 -->
	
	<select id="getList" parameterType="BstoreDto" resultType="BStoreDto">
		SELECT *
		FROM
			(SELECT result1.*, ROWNUM AS rnum
			FROM 
				(SELECT * 
				FROM B_STORE
				<!-- 혜림추가 -->
				<include refid="search" />
				ORDER BY b_id DESC) result1)
		<![CDATA[ 
		WHERE rnum >= #{startRowNum} AND rnum <= #{endRowNum}
		]]>
	</select>
	
	<select id="getCount" resultType="int">
		SELECT NVL(MAX(ROWNUM), 0)
		FROM b_Store
	</select>
	
	
	
	<!-- <select id="getData" parameterType="string" resultType="BStoreDto">
		SELECT b_id, b_name, b_kind, b_intro, b_img_f, service, ex_keyword
		FROM b_Store
		where b_id=#{b_id}
	</select> -->

<!-- b_kind, intro, b_img_f, b_Store_phone, b_Store_date,
		b_open, b_close, b_holiday, notice, service, ex_keyword, storeFile -->

<!-- 
	String b_id, String b_name, String b_Store_Address, String b_kind, String intro, String b_img_f,
			String b_Store_phone, String b_Store_date, String b_open, String b_close,
			String notice, String service, String ex_keyword, MultipartFile storeFile,checkKeyword

 -->
</mapper>