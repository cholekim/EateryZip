<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="BStore">
	<sql id="all">
		<choose>
			<when test="keyword !=null">
			WHERE b_name LIKE '%'||#{encodedK,jdbcType=VARCHAR}||'%'
			OR b_Store_Address LIKE '%'||#{encodedK,jdbcType=VARCHAR}||'%'
			OR b_kind LIKE '%'||#{encodedK,jdbcType=VARCHAR}||'%'
			OR intro LIKE '%'||#{encodedK,jdbcType=VARCHAR}||'%'
			OR notice LIKE '%'||#{encodedK,jdbcType=VARCHAR}||'%'
			OR service LIKE '%'||#{encodedK,jdbcType=VARCHAR}||'%'
			OR ex_keyword LIKE '%'||#{encodedK,jdbcType=VARCHAR}||'%'
			OR checkKeyword LIKE '%'||#{encodedK,jdbcType=VARCHAR}||'%'
			</when>
		</choose>
	</sql>
	
	<sql id="search">
		<choose>
			<!-- 편의사항만만 있을 때 // 중복선택불가-->
			<when test="ex_keyword != null and b_kind == null and service == null">
			WHERE ex_keyword LiKE '%'||#{ex_keyword}||'%'
			</when>
			
			<!-- 업종만 있을 때-->
			<when test="ex_keyword == null and b_kind != null and service == null">
			WHERE b_kind LiKE '%'||#{b_kind}||'%'
			</when>
			
			<!-- 선택만 있을 때-->
			<when test="ex_keyword == null and b_kind == null and service != null">
			WHERE service LiKE '%'||#{service}||'%'
			</when>
			
			<!-- 편의사항 / 업종 -->
			<when test="ex_keyword != null and b_kind != null and service == null">
			where ex_keyword LiKE '%'||#{ex_keyword}||'%'
			and b_kind LiKE '%'||#{b_kind}||'%'
			</when>
			
			<!-- 편의사항 / 서비스 -->
			<when test="ex_keyword != null and b_kind == null and service != null">
			where ex_keyword LiKE '%'||#{ex_keyword}||'%'
			and service LiKE '%'||#{service}||'%'
			</when>

			<!-- 업종 / 서비스 -->
			<when test="ex_keyword == null and b_kind != null and service != null">
			where b_kind LiKE '%'||#{b_kind}||'%'
			and service LiKE '%'||#{service}||'%'
			</when>
			
			<!-- 업종 / 서비스 / 선택 -->
			<when test="ex_keyword != null and b_kind != null and service !=null">
			where ex_keyword LiKE '%'||#{ex_keyword}||'%'
			and b_kind LiKE '%'||#{b_kind}||'%'
			and service LiKE '%'||#{service}||'%'
			</when>
		
		</choose>	
	</sql>
	
	<!-- 주연 음식점 상세 정보 페이지 -->
	<!-- 음식점 사진 리스트 가져오기  -->
	<select id="getStoreImgList" parameterType="String" resultType="StoreImgDto">
		SELECT *
		FROM store_img
		WHERE b_id=#{b_id}
	</select>
	
	<!-- 메뉴 이름,이미지,가격 리스트 가져오기 -->
	<select id="getMenuList" parameterType="String" resultType="MenuDto">
		SELECT menu_name,menu_price,menu_image
		FROM menu
		WHERE b_id=#{b_id}	
	</select>
	
	<!-- 리뷰 리스트 최신순 가져오기 -->
	<select id="getReviewList_R" parameterType="ReviewDto" resultType="ReviewDto">
		SELECT *
		FROM
		(SELECT result1.*, ROWNUM AS rnum
		   FROM (SELECT DISTINCT c.g_profile,a.review_num,a.b_id,a.writer,a.review_image,TO_CHAR(a.review_content) AS review_content,TO_CHAR(a.regdate,'YYYY.MM.DD hh24:mi') AS regdate,a.keyword_review,a.review_kind,
                             (SELECT NVL(MAX(ROWNUM), 0) FROM REVIEW_GOOD WHERE REVIEW_NUM=a.review_num) as GOOD_COUNT,
                             (SELECT NVL(MAX(ROWNUM), 0) FROM REVIEW_GOOD WHERE review_num=a.review_num AND id=#{id,jdbcType=VARCHAR}) AS is_user_good
		         FROM review a, review_good b,g_user c
		         WHERE a.b_id=#{b_id} AND c.g_id=a.writer 
		         ORDER BY regdate DESC) result1)
		 <![CDATA[ 
		WHERE rnum >= #{startRowNum} AND rnum <= #{endRowNum}
		]]>
		
	</select>
	
	<!-- 리뷰 리스트 최신순+사진 리뷰만 가져오기 -->
	<select id="getReviewList_R_P" parameterType="ReviewDto" resultType="ReviewDto">
		SELECT *
		FROM
		(SELECT result1.*, ROWNUM AS rnum
		   FROM (SELECT DISTINCT c.g_profile,a.review_num,a.b_id,a.writer,a.review_image,TO_CHAR(a.review_content) AS review_content,TO_CHAR(a.regdate,'YYYY.MM.DD hh24:mi') AS regdate,a.keyword_review,a.review_kind,
                             (SELECT NVL(MAX(ROWNUM), 0) FROM REVIEW_GOOD WHERE REVIEW_NUM=a.review_num) as GOOD_COUNT,
                             (SELECT NVL(MAX(ROWNUM), 0) FROM REVIEW_GOOD WHERE review_num=a.review_num AND id=#{id,jdbcType=VARCHAR}) AS is_user_good
		         FROM review a, review_good b,g_user c
		         WHERE a.b_id=#{b_id} AND c.g_id=a.writer AND NOT a.review_image IS NULL
		         ORDER BY regdate DESC) result1)
		<![CDATA[ 
		WHERE rnum >= #{startRowNum} AND rnum <= #{endRowNum}
		]]>
	</select>
	
	<!-- 리뷰 리스트 인기순 가져오기 -->
	<!-- 일단 미루기 -->
	<select id="getReviewList_P" parameterType="ReviewDto" resultType="ReviewDto" >
		SELECT *
		FROM
		(SELECT result1.*, ROWNUM AS rnum
		   FROM (SELECT DISTINCT c.g_profile,a.review_num,a.b_id,a.writer,a.review_image,TO_CHAR(a.review_content) AS review_content,TO_CHAR(a.regdate,'YYYY.MM.DD hh24:mi') AS regdate,a.keyword_review,a.review_kind,
                             (SELECT NVL(MAX(ROWNUM), 0) FROM REVIEW_GOOD WHERE REVIEW_NUM=a.review_num) as GOOD_COUNT,
                             (SELECT NVL(MAX(ROWNUM), 0) FROM REVIEW_GOOD WHERE review_num=a.review_num AND id=#{id,jdbcType=VARCHAR}) AS is_user_good
		         FROM review a, review_good b,g_user c
		         WHERE a.b_id=#{b_id} AND c.g_id=a.writer
		         ORDER BY good_count DESC, regdate DESC) result1)
		<![CDATA[ 
		WHERE rnum >= #{startRowNum} AND rnum <= #{endRowNum}
		]]>
	</select>
	
	<!-- 리뷰 리스트 인기순+사진 리뷰만 가져오기 -->
	<!-- 일단 미루기 -->
	<select id="getReviewList_P_P" parameterType="ReviewDto" resultType="ReviewDto" >
		SELECT *
		FROM
		(SELECT result1.*, ROWNUM AS rnum
		   FROM (SELECT DISTINCT c.g_profile,a.review_num,a.b_id,a.writer,a.review_image,TO_CHAR(a.review_content) AS review_content,TO_CHAR(a.regdate,'YYYY.MM.DD hh24:mi') AS regdate,a.keyword_review,a.review_kind,
                             (SELECT NVL(MAX(ROWNUM), 0) FROM REVIEW_GOOD WHERE REVIEW_NUM=a.review_num) as GOOD_COUNT,
                             (SELECT NVL(MAX(ROWNUM), 0) FROM REVIEW_GOOD WHERE review_num=a.review_num AND id=#{id,jdbcType=VARCHAR}) AS is_user_good
		         FROM review a, review_good b,g_user c
		         WHERE a.b_id=#{b_id} AND c.g_id=a.writer AND NOT a.review_image IS NULL
		         ORDER BY good_count DESC, regdate DESC) result1)
		<![CDATA[ 
		WHERE rnum >= #{startRowNum} AND rnum <= #{endRowNum}
		]]>
	</select>
	
	<!-- 배너에 들어갈 인기순 리뷰 사진리스트 가져오기 -->
	<select id="getReviewImgList" parameterType="String" resultType="ReviewDto" >
		SELECT *
		FROM
		(SELECT result1.*, ROWNUM AS rnum
		   FROM (SELECT DISTINCT a.review_num,a.b_id,a.writer,a.review_image,TO_CHAR(a.review_content) AS review_content,TO_CHAR(a.regdate,'YYYY.MM.DD hh24:mi') AS regdate,
                             (SELECT NVL(MAX(ROWNUM), 0) FROM REVIEW_GOOD WHERE REVIEW_NUM=a.review_num) as GOOD_COUNT
		         FROM review a, review_good b
		         WHERE a.b_id=#{b_id}  AND NOT a.review_image IS NULL
		         ORDER BY good_count DESC, regdate DESC) result1)
	</select>
	
	<!-- 리뷰 개수 세기 -->
	<select id="getReviewCount" parameterType="String" resultType="int">
		SELECT NVL(MAX(ROWNUM), 0)
		FROM review
		WHERE b_id=#{b_id}
	</select>
	<!-- 사진리뷰만 개수 세기 -->
	<select id="getReviewCountOnly" parameterType="String" resultType="int">
		SELECT NVL(MAX(ROWNUM), 0)
		FROM review
		WHERE b_id='1111111111' AND NOT review_image IS NULL
	</select>
	
	<!-- 키워드별 개수 -->
	<select id="getKeyCount" parameterType="ReviewDto" resultType="ReviewDto">
		SELECT #{key_word} AS key_word, NVL(MAX(ROWNUM),0) AS good_count
		FROM review
		WHERE keyword_review LIKE '%'||#{key_word}||'%' AND b_id=#{b_id}
	</select>
	
	<!-- 음식점 스크랩하기 -->
	<insert id="doScrap" parameterType="EateryScrapDto">
		INSERT INTO eatery_scrap
		(b_id,g_id)
		VALUES(#{b_id},#{g_id,jdbcType=VARCHAR})
	</insert>
	<!-- 음식점 스크랩 취소하기 -->
	<delete id="notScrap" parameterType="EateryScrapDto">
		DELETE FROM eatery_scrap
		WHERE b_id=#{b_id} AND g_id=#{g_id,jdbcType=VARCHAR}
	</delete>
	<!-- 음식점 스크랩 유무 확인하기 -->
	<select id="isScrap" parameterType="EateryScrapDto" resultType="int">
		SELECT NVL(MAX(ROWNUM),0)
		FROM eatery_scrap
		WHERE b_id=#{b_id} AND g_id=#{g_id,jdbcType=VARCHAR}
	</select>
	
	<!-- 리뷰 추천 -->
	<insert id="doReviewGood" parameterType="ReviewGoodDto">
		INSERT INTO review_good
		(review_num,id)
		VALUES(#{review_num},#{id})
	</insert>
	<!-- 리뷰 추천 취소 -->
	<delete id="notReviewGood" parameterType="ReviewGoodDto">
		DELETE FROM review_good
		WHERE review_num=#{review_num} AND id=#{id}
	</delete>
	
	<!-- 주연&혜림 -->
	<!-- b_id로 가게정보 얻어오기 -->
	<select id="getStore" parameterType="String" resultType="BStoreDto">
		SELECT *
		FROM B_Store
		WHERE b_id=#{b_id}
	</select>
	
	<!-- 혜림 -->
	
	<!-- 가게 등록하기 -->
	<insert id="insert" parameterType="BStoreDto">
		INSERT INTO B_Store
		(b_id,b_name, b_Store_Address, b_kind, intro, b_Store_phone,b_Store_date, b_open, b_close, notice, service, ex_keyword, checkKeyword)
		VALUES(#{b_id},#{b_name},#{b_Store_Address},#{b_kind},#{intro},#{b_Store_phone},#{b_Store_date},#{b_open},#{b_close},#{notice,jdbcType=VARCHAR},#{service},#{ex_keyword},#{checkKeyword,jdbcType=VARCHAR})
	</insert>
	
	<!-- 이미지등록하기 -->
	<insert id="insertStoreImg" parameterType="StoreImgDto">
		INSERT INTO store_img
		(b_id,store_img)
		VALUES(#{b_id},#{store_img})
	</insert>
	
	
	<!-- 가게정보 수정하기 -->
	<update id="update" parameterType="BStoreDto">
		UPDATE B_Store
		SET b_name=#{b_name}, b_Store_Address=#{b_Store_Address}, b_kind=#{b_kind},intro=#{intro},b_Store_phone=#{b_Store_phone},b_Store_date=#{b_Store_date},
			b_open=#{b_open},b_close=#{b_close},notice=#{notice,jdbcType=VARCHAR},service=#{service},ex_keyword=#{ex_keyword},checkKeyword=#{checkKeyword,jdbcType=VARCHAR}
		WHERE b_id=#{b_id}
		
	</update>
	
	<select id="getStore2" parameterType="BStoreDto" resultType="BStoreDto">
		SELECT result1.*
		FROM
			(SELECT *,
				LAG(b_id,1,0) OVER (ORDER BY b_id DESC) AS prevNum,
				LEAD(b_id,1,0) OVER (ORDER BY b_id DESC) AS nextNum
			FROM B_STORE
			) result1
		WHERE b_id=#{b_id}
	</select>
  
	<!-- 리스트 부분 -->
	
	<select id="getList" parameterType="BStoreDto" resultType="BStoreDto">
		SELECT *
		FROM
			(SELECT result1.*, ROWNUM AS rnum
			FROM 
				(SELECT DISTINCT b.*,
					(SELECT NVL(MAX(ROWNUM),0) FROM review WHERE keyword_review LIKE '%'||'가성비가 좋아요'||'%' AND b_id=b.b_id) AS r1,
					(SELECT NVL(MAX(ROWNUM),0) FROM review WHERE keyword_review LIKE '%'||'포장이 꼼꼼해요'||'%' AND b_id=b.b_id) AS r2,
					(SELECT NVL(MAX(ROWNUM),0) FROM review WHERE keyword_review LIKE '%'||'디저트가 맛있어요'||'%' AND b_id=b.b_id) AS r3,
					(SELECT NVL(MAX(ROWNUM),0) FROM review WHERE keyword_review LIKE '%'||'친절해요'||'%' AND b_id=b.b_id) AS r4,
					(SELECT NVL(MAX(ROWNUM),0) FROM review WHERE keyword_review LIKE '%'||'특별한 메뉴가 있어요'||'%' AND b_id=b.b_id) AS r5,
					(SELECT NVL(MAX(ROWNUM),0) FROM review WHERE keyword_review LIKE '%'||'커피가 맛있어요'||'%' AND b_id=b.b_id) AS r6,
					(SELECT NVL(MAX(ROWNUM),0) FROM review WHERE keyword_review LIKE '%'||'음료가 맛있어요'||'%' AND b_id=b.b_id) AS r7,
					(SELECT NVL(MAX(ROWNUM),0) FROM review WHERE keyword_review LIKE '%'||'대화하기 좋아요'||'%' AND b_id=b.b_id) AS r8,
					(SELECT NVL(MAX(ROWNUM),0) FROM review WHERE keyword_review LIKE '%'||'인테리어가 멋져요'||'%' AND b_id=b.b_id) AS r9,
					(SELECT NVL(MAX(ROWNUM),0) FROM review WHERE keyword_review LIKE '%'||'사진이 잘 나와요'||'%' AND b_id=b.b_id) AS r10,
					(SELECT NVL(MAX(ROWNUM),0) FROM review WHERE keyword_review LIKE '%'||'뷰가 좋아요'||'%' AND b_id=b.b_id) AS r11,
					(SELECT NVL(MAX(ROWNUM),0) FROM eatery_scrap WHERE b_id=b.b_id) AS sCount,
					(SELECT NVL(MAX(ROWNUM),0) FROM eatery_scrap WHERE b_id=b.b_id AND g_id=#{g_id,jdbcType=VARCHAR}) AS isScrap
				FROM B_STORE b,REVIEW r,EATERY_SCRAP e 
				<include refid="search"/> ORDER BY sCount DESC) result1
			<include refid="all"/> )
		<![CDATA[ 
		WHERE rnum >= #{startRowNum} AND rnum <= #{endRowNum}
		]]>
	</select>
	
	<select id="getCount" parameterType="BStoreDto" resultType="int">
		SELECT NVL(MAX(ROWNUM), 0)
		FROM 
			(Select *
			 From B_Store
			<include refid="search"/>)
		<include refid="all"/>
	</select>
	
	
</mapper>